using System;
using System.Linq;
using NUnit.Framework;

namespace NHibernate3Sample.MappingTest
{
    using Autofac;
    using Autofac.Repository.Contract;
    using Entity;

    [TestFixture]
    public class CategoryRepositoryTesting : IDisposable
    {
        private ICategoryRepository _repository;

        [SetUp]
        public void InitTest()
        {
            log4net.Config.XmlConfigurator.Configure();
            _repository = IoC.GetInstance<ICategoryRepository>();
        }

        [Test]
        public void Can_Add_Category()
        {
            var uow = _repository.UnitOfWork;
            var result = _repository.Add(new Category
                                             {
                                                 Name = "name 1",
                                                 CreatedDate = DateTime.Now,
                                                 Description = "description 1"
                                             });
            uow.Commit();
            Assert.Greater(result, 0);
        }

        [Test]
        public void Can_Update_Category()
        {
            var uow = _repository.UnitOfWork;

            var result = _repository.GetBy(x => x.Name == "name 1");

            if (result != null && result.FirstOrDefault() != null)
            {
                var firstObject = result.FirstOrDefault();

                Assert.IsTrue(firstObject.Name == "name 1");
                Assert.IsTrue(firstObject.Description == "description 1");

                firstObject.Name = "update name 1";

                _repository.Update(firstObject);

                var secondResult = _repository.GetBy(x => x.Name == "update name 1");

                if (secondResult != null && secondResult.FirstOrDefault() != null)
                {
                    var secondResultObject = secondResult.FirstOrDefault();

                    Assert.IsTrue(firstObject.Name == "update name 1");
                    Assert.IsTrue(firstObject.Description == "description 1");

                    secondResultObject.Name = "name 1";
                    _repository.Update(secondResultObject);

                    uow.Commit();
                }
            }
        }

        [Test]
        public void Can_Delete_Category()
        {
            var deleteTargetObjs = _repository.GetBy(x => x.Name == "name 1");

            _repository.Remove(deleteTargetObjs.FirstOrDefault());

            var result = _repository.GetBy(x => x.Name == "name 1");

            Assert.AreEqual(result.Count(), 0);
        }

        [Test]
        public void Can_Get_All_Categories()
        {
            // add dummy object
            var dummyObj = _repository.Add(new Category
            {
                Name = "dummy object name",
                CreatedDate = DateTime.Now,
                Description = "dummy object description"
            });

            var result = _repository.All();

            Assert.IsNotNull(result);
            Assert.Greater(result.Count(), 0);

            var result1 = _repository.GetBy(x => x.Name == "dummy object name");

            Assert.IsNotNull(result);
            Assert.Greater(result.Count(), 1);

            // remove dummy object
            _repository.Remove(result1.FirstOrDefault());
        }

        [TearDown]
        public void Dispose()
        {
            if (_repository != null)
                GC.SuppressFinalize(_repository);
        }
    }
}